type Login {
  id: ID!
  user: User!
  email: String!
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
  notes: [Note]
  notesQueries: [NotesQuery]
}

type Session {
  id: ID!
  token: String!
}

type Note {
  id: ID!
  createdAt: String!
  updatedAt: String!
  authorId: String!
  author: User!
  title: String
  editorState: String!
}

enum NotesQueryStatus {
  PENDING
  SUCCESSFUL
  ERROR
}

type NotesQuery {
  id: ID!
  createdAt: String!
  updatedAt: String!
  authorId: String!
  author: User!
  query: String!
  response: String
  status: NotesQueryStatus
}

input CreateLoginInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  passwordConfirmation: String!
}

input LoginInput {
  email: String!
  password: String!
}

input NoteInput {
  authorId: ID!
  title: String
  editorState: String!
}

input CreateNotesQueryInput {
  authorId: ID!
  query: String!
}

input UpdateNotesQueryInput {
  response: String!
}

type Query {
  users: [User]
  session(id: String!): Session
  note(id: String!): Note
  notes(authorId: String!): [Note]
  notesQueries(authorId: String!): [NotesQuery]
}

type Mutation {
  createLogin(input: CreateLoginInput!): Login!
  login(input: LoginInput!): Session!
  logout: Session!
  createNote(input: NoteInput!): Note!
  updateNote(id: String!, input: NoteInput!): Note!
  deleteNote(id: String!): Note!
  createNotesQuery(input: CreateNotesQueryInput!): NotesQuery!
  updateNotesQuery(id: String!, input: UpdateNotesQueryInput!): NotesQuery!
  deleteNotesQuery(id: String!): NotesQuery!
  deleteNotesQueries(authorId: String!): Boolean!
}
